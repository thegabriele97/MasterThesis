-- (c) Copyright 1995-2022 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
-- 
-- DO NOT MODIFY THIS FILE.

-- IP VLNV: xilinx.com:ip:dfx_decoupler:1.0
-- IP Revision: 2

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY design_1_dfx_decoupler_1_0 IS
  PORT (
    s_DLMB_RST : IN STD_LOGIC;
    rp_DLMB_RST : OUT STD_LOGIC;
    s_DLMB_ABUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_DLMB_ABUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_DLMB_READSTROBE : OUT STD_LOGIC;
    rp_DLMB_READSTROBE : IN STD_LOGIC;
    s_DLMB_WRITESTROBE : OUT STD_LOGIC;
    rp_DLMB_WRITESTROBE : IN STD_LOGIC;
    s_DLMB_ADDRSTROBE : OUT STD_LOGIC;
    rp_DLMB_ADDRSTROBE : IN STD_LOGIC;
    s_DLMB_ADDRTAG : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
    rp_DLMB_ADDRTAG : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    s_DLMB_WRITEDBUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_DLMB_WRITEDBUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_DLMB_BE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    rp_DLMB_BE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    s_DLMB_READY : IN STD_LOGIC;
    rp_DLMB_READY : OUT STD_LOGIC;
    s_DLMB_WAIT : IN STD_LOGIC;
    rp_DLMB_WAIT : OUT STD_LOGIC;
    s_DLMB_CE : IN STD_LOGIC;
    rp_DLMB_CE : OUT STD_LOGIC;
    s_DLMB_UE : IN STD_LOGIC;
    rp_DLMB_UE : OUT STD_LOGIC;
    s_DLMB_READDBUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_DLMB_READDBUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_ILMB_ABUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_ILMB_ABUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_ILMB_READSTROBE : OUT STD_LOGIC;
    rp_ILMB_READSTROBE : IN STD_LOGIC;
    s_ILMB_ADDRSTROBE : OUT STD_LOGIC;
    rp_ILMB_ADDRSTROBE : IN STD_LOGIC;
    s_ILMB_READY : IN STD_LOGIC;
    rp_ILMB_READY : OUT STD_LOGIC;
    s_ILMB_WAIT : IN STD_LOGIC;
    rp_ILMB_WAIT : OUT STD_LOGIC;
    s_ILMB_CE : IN STD_LOGIC;
    rp_ILMB_CE : OUT STD_LOGIC;
    s_ILMB_UE : IN STD_LOGIC;
    rp_ILMB_UE : OUT STD_LOGIC;
    s_ILMB_READDBUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_ILMB_READDBUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_AXI_DP_ARVALID : OUT STD_LOGIC;
    rp_AXI_DP_ARVALID : IN STD_LOGIC;
    s_AXI_DP_ARREADY : IN STD_LOGIC;
    rp_AXI_DP_ARREADY : OUT STD_LOGIC;
    s_AXI_DP_AWVALID : OUT STD_LOGIC;
    rp_AXI_DP_AWVALID : IN STD_LOGIC;
    s_AXI_DP_AWREADY : IN STD_LOGIC;
    rp_AXI_DP_AWREADY : OUT STD_LOGIC;
    s_AXI_DP_BVALID : IN STD_LOGIC;
    rp_AXI_DP_BVALID : OUT STD_LOGIC;
    s_AXI_DP_BREADY : OUT STD_LOGIC;
    rp_AXI_DP_BREADY : IN STD_LOGIC;
    s_AXI_DP_RVALID : IN STD_LOGIC;
    rp_AXI_DP_RVALID : OUT STD_LOGIC;
    s_AXI_DP_RREADY : OUT STD_LOGIC;
    rp_AXI_DP_RREADY : IN STD_LOGIC;
    s_AXI_DP_WVALID : OUT STD_LOGIC;
    rp_AXI_DP_WVALID : IN STD_LOGIC;
    s_AXI_DP_WREADY : IN STD_LOGIC;
    rp_AXI_DP_WREADY : OUT STD_LOGIC;
    s_AXI_DP_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_AXI_DP_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_AXI_DP_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    rp_AXI_DP_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    s_AXI_DP_AWREGION : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    rp_AXI_DP_AWREGION : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    s_AXI_DP_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    rp_AXI_DP_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    s_AXI_DP_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_AXI_DP_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_AXI_DP_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    rp_AXI_DP_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    s_AXI_DP_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    rp_AXI_DP_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    s_AXI_DP_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_AXI_DP_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_AXI_DP_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    rp_AXI_DP_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    s_AXI_DP_ARREGION : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    rp_AXI_DP_ARREGION : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    s_AXI_DP_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    rp_AXI_DP_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    s_AXI_DP_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    rp_AXI_DP_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    s_AXI_DP_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    rp_AXI_DP_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    decouple : IN STD_LOGIC
  );
END design_1_dfx_decoupler_1_0;

ARCHITECTURE design_1_dfx_decoupler_1_0_arch OF design_1_dfx_decoupler_1_0 IS
  ATTRIBUTE DowngradeIPIdentifiedWarnings : STRING;
  ATTRIBUTE DowngradeIPIdentifiedWarnings OF design_1_dfx_decoupler_1_0_arch: ARCHITECTURE IS "yes";
  COMPONENT dfx_decoupler_design_1_dfx_decoupler_1_0 IS
    GENERIC (
      C_XDEVICEFAMILY : STRING
    );
    PORT (
      s_DLMB_RST : IN STD_LOGIC;
      rp_DLMB_RST : OUT STD_LOGIC;
      s_DLMB_ABUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_DLMB_ABUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_DLMB_READSTROBE : OUT STD_LOGIC;
      rp_DLMB_READSTROBE : IN STD_LOGIC;
      s_DLMB_WRITESTROBE : OUT STD_LOGIC;
      rp_DLMB_WRITESTROBE : IN STD_LOGIC;
      s_DLMB_ADDRSTROBE : OUT STD_LOGIC;
      rp_DLMB_ADDRSTROBE : IN STD_LOGIC;
      s_DLMB_ADDRTAG : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      rp_DLMB_ADDRTAG : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      s_DLMB_WRITEDBUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_DLMB_WRITEDBUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_DLMB_BE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      rp_DLMB_BE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_DLMB_READY : IN STD_LOGIC;
      rp_DLMB_READY : OUT STD_LOGIC;
      s_DLMB_WAIT : IN STD_LOGIC;
      rp_DLMB_WAIT : OUT STD_LOGIC;
      s_DLMB_CE : IN STD_LOGIC;
      rp_DLMB_CE : OUT STD_LOGIC;
      s_DLMB_UE : IN STD_LOGIC;
      rp_DLMB_UE : OUT STD_LOGIC;
      s_DLMB_READDBUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_DLMB_READDBUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_ILMB_ABUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_ILMB_ABUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_ILMB_READSTROBE : OUT STD_LOGIC;
      rp_ILMB_READSTROBE : IN STD_LOGIC;
      s_ILMB_ADDRSTROBE : OUT STD_LOGIC;
      rp_ILMB_ADDRSTROBE : IN STD_LOGIC;
      s_ILMB_READY : IN STD_LOGIC;
      rp_ILMB_READY : OUT STD_LOGIC;
      s_ILMB_WAIT : IN STD_LOGIC;
      rp_ILMB_WAIT : OUT STD_LOGIC;
      s_ILMB_CE : IN STD_LOGIC;
      rp_ILMB_CE : OUT STD_LOGIC;
      s_ILMB_UE : IN STD_LOGIC;
      rp_ILMB_UE : OUT STD_LOGIC;
      s_ILMB_READDBUS : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_ILMB_READDBUS : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_AXI_DP_ARVALID : OUT STD_LOGIC;
      rp_AXI_DP_ARVALID : IN STD_LOGIC;
      s_AXI_DP_ARREADY : IN STD_LOGIC;
      rp_AXI_DP_ARREADY : OUT STD_LOGIC;
      s_AXI_DP_AWVALID : OUT STD_LOGIC;
      rp_AXI_DP_AWVALID : IN STD_LOGIC;
      s_AXI_DP_AWREADY : IN STD_LOGIC;
      rp_AXI_DP_AWREADY : OUT STD_LOGIC;
      s_AXI_DP_BVALID : IN STD_LOGIC;
      rp_AXI_DP_BVALID : OUT STD_LOGIC;
      s_AXI_DP_BREADY : OUT STD_LOGIC;
      rp_AXI_DP_BREADY : IN STD_LOGIC;
      s_AXI_DP_RVALID : IN STD_LOGIC;
      rp_AXI_DP_RVALID : OUT STD_LOGIC;
      s_AXI_DP_RREADY : OUT STD_LOGIC;
      rp_AXI_DP_RREADY : IN STD_LOGIC;
      s_AXI_DP_WVALID : OUT STD_LOGIC;
      rp_AXI_DP_WVALID : IN STD_LOGIC;
      s_AXI_DP_WREADY : IN STD_LOGIC;
      rp_AXI_DP_WREADY : OUT STD_LOGIC;
      s_AXI_DP_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_AXI_DP_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_AXI_DP_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      rp_AXI_DP_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      s_AXI_DP_AWREGION : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      rp_AXI_DP_AWREGION : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_AXI_DP_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      rp_AXI_DP_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_AXI_DP_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_AXI_DP_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_AXI_DP_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      rp_AXI_DP_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_AXI_DP_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      rp_AXI_DP_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      s_AXI_DP_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_AXI_DP_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_AXI_DP_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      rp_AXI_DP_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      s_AXI_DP_ARREGION : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      rp_AXI_DP_ARREGION : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_AXI_DP_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      rp_AXI_DP_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      s_AXI_DP_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      rp_AXI_DP_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      s_AXI_DP_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      rp_AXI_DP_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      decouple : IN STD_LOGIC
    );
  END COMPONENT dfx_decoupler_design_1_dfx_decoupler_1_0;
  ATTRIBUTE X_CORE_INFO : STRING;
  ATTRIBUTE X_CORE_INFO OF design_1_dfx_decoupler_1_0_arch: ARCHITECTURE IS "dfx_decoupler_design_1_dfx_decoupler_1_0,Vivado 2021.1";
  ATTRIBUTE CHECK_LICENSE_TYPE : STRING;
  ATTRIBUTE CHECK_LICENSE_TYPE OF design_1_dfx_decoupler_1_0_arch : ARCHITECTURE IS "design_1_dfx_decoupler_1_0,dfx_decoupler_design_1_dfx_decoupler_1_0,{}";
  ATTRIBUTE CORE_GENERATION_INFO : STRING;
  ATTRIBUTE CORE_GENERATION_INFO OF design_1_dfx_decoupler_1_0_arch: ARCHITECTURE IS "design_1_dfx_decoupler_1_0,dfx_decoupler_design_1_dfx_decoupler_1_0,{x_ipProduct=Vivado 2021.1,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=dfx_decoupler,x_ipVersion=1.0,x_ipCoreRevision=2,x_ipLanguage=VHDL,x_ipSimLanguage=MIXED,C_XDEVICEFAMILY=zynq}";
  ATTRIBUTE X_INTERFACE_INFO : STRING;
  ATTRIBUTE X_INTERFACE_PARAMETER : STRING;
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_ARQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP ARQOS";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_ARQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP ARQOS";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_ARREGION: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP ARREGION";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_ARREGION: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP ARREGION";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_ARPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP ARPROT";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_ARPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP ARPROT";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_AWQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP AWQOS";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_AWQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP AWQOS";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_AWREGION: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP AWREGION";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_AWREGION: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP AWREGION";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_AWPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP AWPROT";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_AWPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP AWPROT";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP WVALID";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP WVALID";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP ARREADY";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP ARREADY";
  ATTRIBUTE X_INTERFACE_PARAMETER OF rp_AXI_DP_ARVALID: SIGNAL IS "XIL_INTERFACENAME rp_AXI_DP, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 50000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSE" & 
"R_BITS_PER_BYTE 0, INSERT_VIP 0, MISC.CLK_REQUIRED FALSE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_AXI_DP_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 rp_AXI_DP ARVALID";
  ATTRIBUTE X_INTERFACE_PARAMETER OF s_AXI_DP_ARVALID: SIGNAL IS "XIL_INTERFACENAME s_AXI_DP, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 50000000, ID_WIDTH 0, ADDR_WIDTH 32, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 1, HAS_REGION 1, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER" & 
"_BITS_PER_BYTE 0, INSERT_VIP 0, MISC.CLK_REQUIRED FALSE";
  ATTRIBUTE X_INTERFACE_INFO OF s_AXI_DP_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 s_AXI_DP ARVALID";
  ATTRIBUTE X_INTERFACE_INFO OF rp_ILMB_READDBUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_ILMB READDBUS";
  ATTRIBUTE X_INTERFACE_INFO OF s_ILMB_READDBUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_ILMB READDBUS";
  ATTRIBUTE X_INTERFACE_INFO OF rp_ILMB_UE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_ILMB UE";
  ATTRIBUTE X_INTERFACE_INFO OF s_ILMB_UE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_ILMB UE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_ILMB_CE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_ILMB CE";
  ATTRIBUTE X_INTERFACE_INFO OF s_ILMB_CE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_ILMB CE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_ILMB_WAIT: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_ILMB WAIT";
  ATTRIBUTE X_INTERFACE_INFO OF s_ILMB_WAIT: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_ILMB WAIT";
  ATTRIBUTE X_INTERFACE_INFO OF rp_ILMB_READY: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_ILMB READY";
  ATTRIBUTE X_INTERFACE_INFO OF s_ILMB_READY: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_ILMB READY";
  ATTRIBUTE X_INTERFACE_INFO OF rp_ILMB_ADDRSTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_ILMB ADDRSTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF s_ILMB_ADDRSTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_ILMB ADDRSTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_ILMB_READSTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_ILMB READSTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF s_ILMB_READSTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_ILMB READSTROBE";
  ATTRIBUTE X_INTERFACE_PARAMETER OF rp_ILMB_ABUS: SIGNAL IS "XIL_INTERFACENAME rp_ILMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_ONLY, PROTOCOL STANDARD, MISC.CLK_REQUIRED FALSE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_ILMB_ABUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_ILMB ABUS";
  ATTRIBUTE X_INTERFACE_PARAMETER OF s_ILMB_ABUS: SIGNAL IS "XIL_INTERFACENAME s_ILMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD, MISC.CLK_REQUIRED FALSE";
  ATTRIBUTE X_INTERFACE_INFO OF s_ILMB_ABUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_ILMB ABUS";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_READDBUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB READDBUS";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_READDBUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB READDBUS";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_UE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB UE";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_UE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB UE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_CE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB CE";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_CE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB CE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_WAIT: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB WAIT";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_WAIT: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB WAIT";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_READY: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB READY";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_READY: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB READY";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_BE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB BE";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_BE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB BE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_WRITEDBUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB WRITEDBUS";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_WRITEDBUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB WRITEDBUS";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_ADDRTAG: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB ADDRTAG";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_ADDRTAG: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB ADDRTAG";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_ADDRSTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB ADDRSTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_ADDRSTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB ADDRSTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_WRITESTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB WRITESTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_WRITESTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB WRITESTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_READSTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB READSTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_READSTROBE: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB READSTROBE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_ABUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB ABUS";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_ABUS: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB ABUS";
  ATTRIBUTE X_INTERFACE_PARAMETER OF rp_DLMB_RST: SIGNAL IS "XIL_INTERFACENAME rp_DLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD, MISC.CLK_REQUIRED FALSE";
  ATTRIBUTE X_INTERFACE_INFO OF rp_DLMB_RST: SIGNAL IS "xilinx.com:interface:lmb:1.0 rp_DLMB RST";
  ATTRIBUTE X_INTERFACE_PARAMETER OF s_DLMB_RST: SIGNAL IS "XIL_INTERFACENAME s_DLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE, PROTOCOL STANDARD, MISC.CLK_REQUIRED FALSE";
  ATTRIBUTE X_INTERFACE_INFO OF s_DLMB_RST: SIGNAL IS "xilinx.com:interface:lmb:1.0 s_DLMB RST";
BEGIN
  U0 : dfx_decoupler_design_1_dfx_decoupler_1_0
    GENERIC MAP (
      C_XDEVICEFAMILY => "zynq"
    )
    PORT MAP (
      s_DLMB_RST => s_DLMB_RST,
      rp_DLMB_RST => rp_DLMB_RST,
      s_DLMB_ABUS => s_DLMB_ABUS,
      rp_DLMB_ABUS => rp_DLMB_ABUS,
      s_DLMB_READSTROBE => s_DLMB_READSTROBE,
      rp_DLMB_READSTROBE => rp_DLMB_READSTROBE,
      s_DLMB_WRITESTROBE => s_DLMB_WRITESTROBE,
      rp_DLMB_WRITESTROBE => rp_DLMB_WRITESTROBE,
      s_DLMB_ADDRSTROBE => s_DLMB_ADDRSTROBE,
      rp_DLMB_ADDRSTROBE => rp_DLMB_ADDRSTROBE,
      s_DLMB_ADDRTAG => s_DLMB_ADDRTAG,
      rp_DLMB_ADDRTAG => rp_DLMB_ADDRTAG,
      s_DLMB_WRITEDBUS => s_DLMB_WRITEDBUS,
      rp_DLMB_WRITEDBUS => rp_DLMB_WRITEDBUS,
      s_DLMB_BE => s_DLMB_BE,
      rp_DLMB_BE => rp_DLMB_BE,
      s_DLMB_READY => s_DLMB_READY,
      rp_DLMB_READY => rp_DLMB_READY,
      s_DLMB_WAIT => s_DLMB_WAIT,
      rp_DLMB_WAIT => rp_DLMB_WAIT,
      s_DLMB_CE => s_DLMB_CE,
      rp_DLMB_CE => rp_DLMB_CE,
      s_DLMB_UE => s_DLMB_UE,
      rp_DLMB_UE => rp_DLMB_UE,
      s_DLMB_READDBUS => s_DLMB_READDBUS,
      rp_DLMB_READDBUS => rp_DLMB_READDBUS,
      s_ILMB_ABUS => s_ILMB_ABUS,
      rp_ILMB_ABUS => rp_ILMB_ABUS,
      s_ILMB_READSTROBE => s_ILMB_READSTROBE,
      rp_ILMB_READSTROBE => rp_ILMB_READSTROBE,
      s_ILMB_ADDRSTROBE => s_ILMB_ADDRSTROBE,
      rp_ILMB_ADDRSTROBE => rp_ILMB_ADDRSTROBE,
      s_ILMB_READY => s_ILMB_READY,
      rp_ILMB_READY => rp_ILMB_READY,
      s_ILMB_WAIT => s_ILMB_WAIT,
      rp_ILMB_WAIT => rp_ILMB_WAIT,
      s_ILMB_CE => s_ILMB_CE,
      rp_ILMB_CE => rp_ILMB_CE,
      s_ILMB_UE => s_ILMB_UE,
      rp_ILMB_UE => rp_ILMB_UE,
      s_ILMB_READDBUS => s_ILMB_READDBUS,
      rp_ILMB_READDBUS => rp_ILMB_READDBUS,
      s_AXI_DP_ARVALID => s_AXI_DP_ARVALID,
      rp_AXI_DP_ARVALID => rp_AXI_DP_ARVALID,
      s_AXI_DP_ARREADY => s_AXI_DP_ARREADY,
      rp_AXI_DP_ARREADY => rp_AXI_DP_ARREADY,
      s_AXI_DP_AWVALID => s_AXI_DP_AWVALID,
      rp_AXI_DP_AWVALID => rp_AXI_DP_AWVALID,
      s_AXI_DP_AWREADY => s_AXI_DP_AWREADY,
      rp_AXI_DP_AWREADY => rp_AXI_DP_AWREADY,
      s_AXI_DP_BVALID => s_AXI_DP_BVALID,
      rp_AXI_DP_BVALID => rp_AXI_DP_BVALID,
      s_AXI_DP_BREADY => s_AXI_DP_BREADY,
      rp_AXI_DP_BREADY => rp_AXI_DP_BREADY,
      s_AXI_DP_RVALID => s_AXI_DP_RVALID,
      rp_AXI_DP_RVALID => rp_AXI_DP_RVALID,
      s_AXI_DP_RREADY => s_AXI_DP_RREADY,
      rp_AXI_DP_RREADY => rp_AXI_DP_RREADY,
      s_AXI_DP_WVALID => s_AXI_DP_WVALID,
      rp_AXI_DP_WVALID => rp_AXI_DP_WVALID,
      s_AXI_DP_WREADY => s_AXI_DP_WREADY,
      rp_AXI_DP_WREADY => rp_AXI_DP_WREADY,
      s_AXI_DP_AWADDR => s_AXI_DP_AWADDR,
      rp_AXI_DP_AWADDR => rp_AXI_DP_AWADDR,
      s_AXI_DP_AWPROT => s_AXI_DP_AWPROT,
      rp_AXI_DP_AWPROT => rp_AXI_DP_AWPROT,
      s_AXI_DP_AWREGION => s_AXI_DP_AWREGION,
      rp_AXI_DP_AWREGION => rp_AXI_DP_AWREGION,
      s_AXI_DP_AWQOS => s_AXI_DP_AWQOS,
      rp_AXI_DP_AWQOS => rp_AXI_DP_AWQOS,
      s_AXI_DP_WDATA => s_AXI_DP_WDATA,
      rp_AXI_DP_WDATA => rp_AXI_DP_WDATA,
      s_AXI_DP_WSTRB => s_AXI_DP_WSTRB,
      rp_AXI_DP_WSTRB => rp_AXI_DP_WSTRB,
      s_AXI_DP_BRESP => s_AXI_DP_BRESP,
      rp_AXI_DP_BRESP => rp_AXI_DP_BRESP,
      s_AXI_DP_ARADDR => s_AXI_DP_ARADDR,
      rp_AXI_DP_ARADDR => rp_AXI_DP_ARADDR,
      s_AXI_DP_ARPROT => s_AXI_DP_ARPROT,
      rp_AXI_DP_ARPROT => rp_AXI_DP_ARPROT,
      s_AXI_DP_ARREGION => s_AXI_DP_ARREGION,
      rp_AXI_DP_ARREGION => rp_AXI_DP_ARREGION,
      s_AXI_DP_ARQOS => s_AXI_DP_ARQOS,
      rp_AXI_DP_ARQOS => rp_AXI_DP_ARQOS,
      s_AXI_DP_RDATA => s_AXI_DP_RDATA,
      rp_AXI_DP_RDATA => rp_AXI_DP_RDATA,
      s_AXI_DP_RRESP => s_AXI_DP_RRESP,
      rp_AXI_DP_RRESP => rp_AXI_DP_RRESP,
      decouple => decouple
    );
END design_1_dfx_decoupler_1_0_arch;
